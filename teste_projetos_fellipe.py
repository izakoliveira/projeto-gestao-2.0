#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from dotenv import load_dotenv

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Carregar vari√°veis de ambiente
load_dotenv()

from supabase import create_client, Client

# Configura√ß√£o do Supabase
url = os.environ.get("SUPABASE_URL")
key = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)

def testar_projetos_fellipe():
    """Testa todos os projetos e permiss√µes do usu√°rio Fellipe"""
    
    # ID do usu√°rio Fellipe
    user_id = "6afb28b7-2c10-4f9b-a0d5-c9ce27600521"
    
    print(f"üîç Testando projetos e permiss√µes para usu√°rio Fellipe (ID: {user_id})")
    print("=" * 70)
    
    try:
        # 1. Buscar todos os projetos
        print("1. Buscando TODOS os projetos...")
        todos_projetos_resp = supabase.table("projetos").select("id, nome, usuario_id").execute()
        todos_projetos = todos_projetos_resp.data if hasattr(todos_projetos_resp, 'data') else []
        
        print(f"   ‚úÖ Total de projetos no sistema: {len(todos_projetos)}")
        for projeto in todos_projetos:
            print(f"      - {projeto['nome']} (ID: {projeto['id']}, Usu√°rio: {projeto['usuario_id']})")
        
        # 2. Buscar projetos do usu√°rio Fellipe
        print("\n2. Buscando projetos DO usu√°rio Fellipe...")
        projetos_fellipe_resp = supabase.table("projetos").select("id, nome").eq("usuario_id", user_id).execute()
        projetos_fellipe = projetos_fellipe_resp.data if hasattr(projetos_fellipe_resp, 'data') else []
        
        print(f"   ‚úÖ Projetos DO usu√°rio Fellipe: {len(projetos_fellipe)}")
        for projeto in projetos_fellipe:
            print(f"      - {projeto['nome']} (ID: {projeto['id']})")
        
        # 3. Buscar permiss√µes de visualiza√ß√£o
        print("\n3. Buscando permiss√µes de visualiza√ß√£o...")
        try:
            permissoes_resp = supabase.table("projetos_usuarios_visiveis").select("*").eq("usuario_id", user_id).execute()
            permissoes = permissoes_resp.data if hasattr(permissoes_resp, 'data') else []
            
            print(f"   ‚úÖ Permiss√µes de visualiza√ß√£o: {len(permissoes)}")
            for permissao in permissoes:
                print(f"      - Projeto ID: {permissao['projeto_id']}")
        except Exception as e:
            print(f"   ‚ùå Erro ao buscar permiss√µes: {str(e)}")
        
        # 4. Buscar tarefas do usu√°rio Fellipe
        print("\n4. Buscando tarefas do usu√°rio Fellipe...")
        tarefas_fellipe_resp = supabase.table("tarefas").select("id, nome, status, projeto_id").eq("usuario_id", user_id).execute()
        tarefas_fellipe = tarefas_fellipe_resp.data if hasattr(tarefas_fellipe_resp, 'data') else []
        
        print(f"   ‚úÖ Tarefas do usu√°rio Fellipe: {len(tarefas_fellipe)}")
        for tarefa in tarefas_fellipe:
            projeto_nome = "N/A"
            if tarefa.get('projeto_id'):
                projeto_info = next((p for p in todos_projetos if p['id'] == tarefa['projeto_id']), None)
                if projeto_info:
                    projeto_nome = projeto_info['nome']
            
            print(f"      - {tarefa['nome']} (Status: {tarefa.get('status', 'N/A')}, Projeto: {projeto_nome})")
        
        # 5. Buscar tarefas de todos os projetos (para ver se h√° tarefas em projetos que o Fellipe pode ver)
        print("\n5. Buscando tarefas de TODOS os projetos...")
        todas_tarefas_resp = supabase.table("tarefas").select("id, nome, status, projeto_id, usuario_id").execute()
        todas_tarefas = todas_tarefas_resp.data if hasattr(todas_tarefas_resp, 'data') else []
        
        print(f"   ‚úÖ Total de tarefas no sistema: {len(todas_tarefas)}")
        
        # 6. Verificar se h√° tarefas em projetos que o Fellipe pode acessar
        print("\n6. Verificando tarefas em projetos acess√≠veis...")
        projetos_acessiveis = [p['id'] for p in projetos_fellipe]
        
        # Adicionar projetos das permiss√µes
        for permissao in permissoes:
            if permissao['projeto_id'] not in projetos_acessiveis:
                projetos_acessiveis.append(permissao['projeto_id'])
        
        tarefas_acessiveis = []
        for tarefa in todas_tarefas:
            if tarefa.get('projeto_id') in projetos_acessiveis:
                tarefas_acessiveis.append(tarefa)
        
        print(f"   ‚úÖ Tarefas em projetos acess√≠veis: {len(tarefas_acessiveis)}")
        for tarefa in tarefas_acessiveis:
            projeto_info = next((p for p in todos_projetos if p['id'] == tarefa['projeto_id']), None)
            projeto_nome = projeto_info['nome'] if projeto_info else "N/A"
            print(f"      - {tarefa['nome']} (Status: {tarefa.get('status', 'N/A')}, Projeto: {projeto_nome})")
        
        # 7. Resumo final
        print("\n" + "=" * 70)
        print("üìä RESUMO - USU√ÅRIO FELLIPE")
        print("=" * 70)
        print(f"Projetos pr√≥prios: {len(projetos_fellipe)}")
        print(f"Permiss√µes de visualiza√ß√£o: {len(permissoes)}")
        print(f"Projetos acess√≠veis: {len(projetos_acessiveis)}")
        print(f"Tarefas pr√≥prias: {len(tarefas_fellipe)}")
        print(f"Tarefas em projetos acess√≠veis: {len(tarefas_acessiveis)}")
        
        # 8. Diagn√≥stico
        print("\nüîç DIAGN√ìSTICO:")
        if len(projetos_fellipe) == 0 and len(permissoes) == 0:
            print("   ‚ùå PROBLEMA: Usu√°rio n√£o tem projetos pr√≥prios nem permiss√µes de visualiza√ß√£o!")
            print("   üí° SOLU√á√ÉO: O dashboard s√≥ mostra projetos pr√≥prios, n√£o projetos compartilhados")
        elif len(projetos_fellipe) == 0 and len(permissoes) > 0:
            print("   ‚ö†Ô∏è  AVISO: Usu√°rio tem permiss√µes mas n√£o projetos pr√≥prios")
            print("   üí° SOLU√á√ÉO: O dashboard precisa ser atualizado para incluir projetos compartilhados")
        else:
            print("   ‚úÖ Usu√°rio tem projetos pr√≥prios")
            
    except Exception as e:
        print(f"‚ùå ERRO: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    testar_projetos_fellipe() 