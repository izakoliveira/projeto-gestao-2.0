// üîß CORRE√á√ÉO PARA EXCLUS√ÉO DE TAREFAS
// Este arquivo corrige problemas na funcionalidade de exclus√£o

console.log('üîß Carregando corre√ß√£o para exclus√£o de tarefas...');

// Fun√ß√£o principal de corre√ß√£o
function corrigirExclusaoTarefas() {
    console.log('üîß Aplicando corre√ß√£o para exclus√£o de tarefas...');

    // 1. Verificar se j√° existe configura√ß√£o
    if (window.exclusaoTarefasConfigurada) {
        console.log('‚ö†Ô∏è Exclus√£o de tarefas j√° configurada, reconfigurando...');
    }

    // 2. Limpar event listeners existentes
    try {
        // Remover com mesmas op√ß√µes usadas na adi√ß√£o (capture=true)
        document.removeEventListener('click', window.handleExclusaoClickGlobal, true);
        console.log('‚úÖ Event listeners anteriores removidos');
    } catch (error) {
        console.log('‚ö†Ô∏è Erro ao remover event listeners:', error);
    }

    // 3. Definir handler global
    window.handleExclusaoClickGlobal = function (e) {
        // Verificar se clicou no bot√£o de exclus√£o
        if (e.target.closest('.btn-excluir-tarefa')) {
            e.preventDefault();
            e.stopPropagation();

            console.log('üóëÔ∏è Bot√£o de exclus√£o clicado!');

            const btn = e.target.closest('.btn-excluir-tarefa');
            const tarefaId = btn.getAttribute('data-tarefa-id');

            if (!tarefaId) {
                console.error('‚ùå ID da tarefa n√£o encontrado');
                alert('Erro: ID da tarefa n√£o encontrado');
                return;
            }

            console.log(`üóëÔ∏è Excluindo tarefa: ${tarefaId}`);

            // Confirmar exclus√£o
            if (confirm('Tem certeza que deseja excluir esta tarefa?')) {
                // Executar exclus√£o
                executarExclusaoCorrigida(tarefaId, btn);
            }
        }
    };

    // 4. Adicionar event listener (fase de captura para resistir a stopPropagation em bubbling)
    document.addEventListener('click', window.handleExclusaoClickGlobal, true);
    console.log('‚úÖ Event listener de exclus√£o configurado (capture=true)');

    // 5. Marcar como configurado
    window.exclusaoTarefasConfigurada = true;

    console.log('‚úÖ Corre√ß√£o aplicada com sucesso!');

    // 6. Watchdog/heartbeat: reanexar periodicamente para evitar sobrescritas
    try {
        if (window._exclusaoHeartbeat) {
            clearInterval(window._exclusaoHeartbeat);
        }
        window._exclusaoHeartbeat = setInterval(() => {
            try {
                document.removeEventListener('click', window.handleExclusaoClickGlobal, true);
                document.addEventListener('click', window.handleExclusaoClickGlobal, true);
                // console.debug('üîÅ Heartbeat: listener de exclus√£o reanexado');
            } catch (hbErr) {
                console.warn('‚ö†Ô∏è Heartbeat erro:', hbErr);
            }
        }, 3000);
        console.log('ü´Ä Heartbeat de reconfigura√ß√£o ativado');
    } catch (errHb) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel ativar heartbeat:', errHb);
    }

    // 7. Reconfigurar em eventos de visibilidade/foco
    try {
        const rebind = () => {
            try {
                document.removeEventListener('click', window.handleExclusaoClickGlobal, true);
                document.addEventListener('click', window.handleExclusaoClickGlobal, true);
                // console.debug('üîÑ Rebind em visibilidade/foco');
            } catch (_) { }
        };
        window.addEventListener('visibilitychange', rebind);
        window.addEventListener('focus', rebind);
    } catch (errVis) {
        console.warn('‚ö†Ô∏è Erro ao registrar rebind de visibilidade/foco:', errVis);
    }
}

// Fun√ß√£o para executar exclus√£o
function executarExclusaoCorrigida(tarefaId, btnExcluir) {
    console.log(`üóëÔ∏è Executando exclus√£o da tarefa: ${tarefaId}`);

    // Desabilitar bot√£o e mostrar spinner
    const originalContent = btnExcluir.innerHTML;
    btnExcluir.disabled = true;
    btnExcluir.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';

    // Fazer requisi√ß√£o para excluir
    fetch(`/tarefas/excluir/${tarefaId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
        .then(response => {
            console.log(`üì° Resposta do servidor: ${response.status}`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('üìä Dados da resposta:', data);

            if (data.sucesso) {
                console.log('‚úÖ Tarefa exclu√≠da com sucesso');

                // Remover linha da tabela com anima√ß√£o
                const tr = btnExcluir.closest('tr');
                if (tr) {
                    tr.style.transition = 'opacity 0.3s ease';
                    tr.style.opacity = '0';
                    setTimeout(() => {
                        tr.remove();
                        console.log('‚úÖ Linha removida da tabela');
                    }, 300);
                }

                // Mostrar mensagem de sucesso
                alert('Tarefa exclu√≠da com sucesso!');

            } else {
                throw new Error(data.erro || 'Erro desconhecido do servidor');
            }
        })
        .catch(error => {
            console.error('‚ùå Erro na exclus√£o:', error);
            alert('Erro ao excluir tarefa: ' + error.message);

            // Restaurar bot√£o
            btnExcluir.disabled = false;
            btnExcluir.innerHTML = originalContent;
        });
}

// Fun√ß√£o para verificar status
function verificarStatusExclusao() {
    console.log('üîç Verificando status da exclus√£o de tarefas...');

    const botoes = document.querySelectorAll('.btn-excluir-tarefa');
    const configurado = window.exclusaoTarefasConfigurada;

    console.log(`üîç Bot√µes de exclus√£o encontrados: ${botoes.length}`);
    console.log(`üîç Sistema configurado: ${configurado}`);

    if (botoes.length === 0) {
        console.log('‚ö†Ô∏è Nenhum bot√£o de exclus√£o encontrado');
        return false;
    }

    if (!configurado) {
        console.log('‚ö†Ô∏è Sistema n√£o configurado, aplicando corre√ß√£o...');
        corrigirExclusaoTarefas();
        return true;
    }

    console.log('‚úÖ Sistema funcionando corretamente');
    return true;
}

// Fun√ß√£o para for√ßar reconfigura√ß√£o
function forcarReconfiguracao() {
    console.log('üîÑ For√ßando reconfigura√ß√£o...');
    window.exclusaoTarefasConfigurada = false;
    corrigirExclusaoTarefas();
}

// Configurar quando o DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', corrigirExclusaoTarefas);
} else {
    corrigirExclusaoTarefas();
}

// Configurar tamb√©m no evento load
window.addEventListener('load', corrigirExclusaoTarefas);

// Fun√ß√µes globais para teste
window.corrigirExclusaoTarefas = corrigirExclusaoTarefas;
window.verificarStatusExclusao = verificarStatusExclusao;
window.forcarReconfiguracao = forcarReconfiguracao;

console.log('‚úÖ Corre√ß√£o para exclus√£o de tarefas carregada!');
console.log('üìù Use verificarStatusExclusao() para verificar o status');
console.log('üìù Use forcarReconfiguracao() para for√ßar reconfigura√ß√£o');
