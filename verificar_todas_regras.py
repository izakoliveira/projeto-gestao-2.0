#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
from dotenv import load_dotenv

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Carregar vari√°veis de ambiente
load_dotenv()

from supabase import create_client, Client

# Configura√ß√£o do Supabase
url = os.environ.get("SUPABASE_URL")
key = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)

def carregar_restricoes():
    """Carrega as restri√ß√µes do arquivo JSON"""
    try:
        with open('restricoes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Erro ao carregar restri√ß√µes: {e}")
        return {}

def verificar_todas_regras():
    """Verifica todas as regras para todos os usu√°rios"""
    
    print("üîç VERIFICA√á√ÉO COMPLETA DE TODAS AS REGRAS")
    print("=" * 60)
    
    # 1. Carregar restri√ß√µes
    print("\n1. üìã CARREGANDO RESTRI√á√ïES...")
    restricoes = carregar_restricoes()
    print(f"   ‚úÖ Restri√ß√µes carregadas: {len(restricoes)} usu√°rios")
    
    # 2. Buscar todos os usu√°rios
    print("\n2. üë• BUSCANDO TODOS OS USU√ÅRIOS...")
    try:
        usuarios_resp = supabase.table("usuarios").select("id, nome, email").execute()
        usuarios = usuarios_resp.data if hasattr(usuarios_resp, 'data') else []
        print(f"   ‚úÖ {len(usuarios)} usu√°rios encontrados")
    except Exception as e:
        print(f"   ‚ùå Erro ao buscar usu√°rios: {e}")
        return
    
    # 3. Verificar cada usu√°rio
    print("\n3. üîç VERIFICANDO CADA USU√ÅRIO...")
    print("-" * 60)
    
    problemas_encontrados = []
    
    for usuario in usuarios:
        user_id = str(usuario['id'])
        nome = usuario['nome']
        email = usuario['email']
        
        print(f"\nüë§ USU√ÅRIO: {nome} ({email})")
        print(f"   ID: {user_id}")
        
        # Verificar se tem restri√ß√µes definidas
        if user_id in restricoes:
            restricoes_usuario = restricoes[user_id]
            print(f"   ‚úÖ Restri√ß√µes encontradas")
            
            # Verificar cada restri√ß√£o
            restricoes_ativas = []
            for restricao, valor in restricoes_usuario.items():
                if restricao.startswith('restr_') and valor:
                    restricoes_ativas.append(restricao.replace('restr_', ''))
            
            if restricoes_ativas:
                print(f"   ‚ö†Ô∏è  Restri√ß√µes ativas: {', '.join(restricoes_ativas)}")
            else:
                print(f"   ‚úÖ Sem restri√ß√µes ativas")
                
        else:
            print(f"   ‚ùå PROBLEMA: Usu√°rio n√£o tem restri√ß√µes definidas!")
            problemas_encontrados.append(f"Usu√°rio {nome} ({email}) n√£o tem restri√ß√µes definidas")
        
        # Verificar regras espec√≠ficas
        print(f"   üîç Verificando regras espec√≠ficas...")
        
        # Regra 1: Link Produ√ß√£o (apenas para izak)
        if email == 'izak.gomes59@gmail.com':
            print(f"   ‚úÖ Link Produ√ß√£o: DEVE aparecer (usu√°rio izak)")
        else:
            print(f"   ‚úÖ Link Produ√ß√£o: N√ÉO deve aparecer (n√£o √© izak)")
        
        # Regra 2: Link Administra√ß√£o (apenas para izak)
        if email == 'izak.gomes59@gmail.com':
            print(f"   ‚úÖ Link Administra√ß√£o: DEVE aparecer (usu√°rio izak)")
        else:
            print(f"   ‚úÖ Link Administra√ß√£o: N√ÉO deve aparecer (n√£o √© izak)")
        
        # Regra 3: Link Pastas (apenas para izak)
        if email == 'izak.gomes59@gmail.com':
            print(f"   ‚úÖ Link Pastas: DEVE aparecer (usu√°rio izak)")
        else:
            print(f"   ‚úÖ Link Pastas: N√ÉO deve aparecer (n√£o √© izak)")
    
    # 4. Verificar usu√°rios √≥rf√£os (restri√ß√µes sem usu√°rio)
    print("\n4. üîç VERIFICANDO USU√ÅRIOS √ìRF√ÉOS...")
    usuarios_ids = [str(u['id']) for u in usuarios]
    restricoes_ids = list(restricoes.keys())
    
    usuarios_orfos = [rid for rid in restricoes_ids if rid not in usuarios_ids]
    if usuarios_orfos:
        print(f"   ‚ö†Ô∏è  {len(usuarios_orfos)} usu√°rios √≥rf√£os encontrados:")
        for rid in usuarios_orfos:
            print(f"      - ID: {rid}")
            if rid in restricoes:
                nome = restricoes[rid].get('nome', 'N/A')
                email = restricoes[rid].get('email', 'N/A')
                print(f"        Nome: {nome}, Email: {email}")
    else:
        print(f"   ‚úÖ Nenhum usu√°rio √≥rf√£o encontrado")
    
    # 5. Verificar usu√°rios sem restri√ß√µes
    print("\n5. üîç VERIFICANDO USU√ÅRIOS SEM RESTRI√á√ïES...")
    usuarios_sem_restricoes = [u for u in usuarios if str(u['id']) not in restricoes]
    if usuarios_sem_restricoes:
        print(f"   ‚ö†Ô∏è  {len(usuarios_sem_restricoes)} usu√°rios sem restri√ß√µes:")
        for u in usuarios_sem_restricoes:
            print(f"      - {u['nome']} ({u['email']}) - ID: {u['id']}")
    else:
        print(f"   ‚úÖ Todos os usu√°rios t√™m restri√ß√µes definidas")
    
    # 6. Resumo final
    print("\n6. üìä RESUMO FINAL")
    print("-" * 60)
    print(f"   Total de usu√°rios: {len(usuarios)}")
    print(f"   Usu√°rios com restri√ß√µes: {len(restricoes)}")
    print(f"   Usu√°rios sem restri√ß√µes: {len(usuarios_sem_restricoes)}")
    print(f"   Usu√°rios √≥rf√£os: {len(usuarios_orfos)}")
    print(f"   Problemas encontrados: {len(problemas_encontrados)}")
    
    if problemas_encontrados:
        print(f"\n‚ùå PROBLEMAS ENCONTRADOS:")
        for problema in problemas_encontrados:
            print(f"   - {problema}")
    else:
        print(f"\n‚úÖ TODAS AS REGRAS EST√ÉO APLICADAS CORRETAMENTE!")
    
    # 7. Verificar regras espec√≠ficas do sistema
    print("\n7. üîß VERIFICANDO REGRAS DO SISTEMA...")
    
    # Verificar se o izak tem todas as permiss√µes
    izak_restricoes = None
    for user_id, restricoes_user in restricoes.items():
        if restricoes_user.get('email') == 'izak.gomes59@gmail.com':
            izak_restricoes = restricoes_user
            break
    
    if izak_restricoes:
        print(f"   ‚úÖ Usu√°rio izak encontrado nas restri√ß√µes")
        restricoes_izak = [k for k, v in izak_restricoes.items() if k.startswith('restr_') and v]
        if restricoes_izak:
            print(f"   ‚ö†Ô∏è  AVISO: Usu√°rio izak tem restri√ß√µes ativas: {restricoes_izak}")
        else:
            print(f"   ‚úÖ Usu√°rio izak sem restri√ß√µes (correto)")
    else:
        print(f"   ‚ùå PROBLEMA: Usu√°rio izak n√£o encontrado nas restri√ß√µes!")
    
    print("\n" + "=" * 60)
    print("üèÅ VERIFICA√á√ÉO CONCLU√çDA!")

if __name__ == "__main__":
    verificar_todas_regras() 