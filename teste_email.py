#!/usr/bin/env python3
"""
Script de teste para o sistema de notifica√ß√µes por email
Execute este script para verificar se as configura√ß√µes de email est√£o funcionando
"""

import os
from dotenv import load_dotenv
from utils.email_notifications import (
    email_notifier, 
    notificar_tarefa_designada,
    notificar_tarefa_removida,
    notificar_status_alterado,
    notificar_tarefa_concluida
)

def testar_configuracao_email():
    """Testa a configura√ß√£o b√°sica do sistema de email"""
    print("üîß Testando configura√ß√£o do sistema de email...")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente
    print(f"SMTP_SERVER: {os.getenv('SMTP_SERVER', 'N√£o definido')}")
    print(f"SMTP_PORT: {os.getenv('SMTP_PORT', 'N√£o definido')}")
    print(f"SMTP_USER: {os.getenv('SMTP_USER', 'N√£o definido')}")
    print(f"SMTP_PASS: {'***' if os.getenv('SMTP_PASS') else 'N√£o definido'}")
    print(f"FROM_NAME: {os.getenv('FROM_NAME', 'N√£o definido')}")
    print()
    
    # Verificar status do notificador
    print(f"Email habilitado: {email_notifier.email_enabled}")
    if email_notifier.email_enabled:
        print("‚úÖ Configura√ß√£o de email v√°lida!")
    else:
        print("‚ùå Configura√ß√£o de email inv√°lida ou incompleta")
        print("   Verifique as vari√°veis de ambiente no arquivo .env")
        return False
    
    print()
    return True

def testar_envio_emails():
    """Testa o envio de diferentes tipos de email"""
    if not email_notifier.email_enabled:
        print("‚ùå Sistema de email desabilitado. Configure as vari√°veis primeiro.")
        return
    
    print("üìß Testando envio de emails...")
    print("=" * 50)
    
    # Dados de teste
    tarefa_info = {
        'nome': 'Tarefa de Teste do Sistema',
        'projeto_nome': 'Projeto de Demonstra√ß√£o',
        'data_inicio': '01/01/2025',
        'data_fim': '31/01/2025',
        'duracao': '30 dias',
        'colecao': 'Testes e Valida√ß√µes'
    }
    
    projeto_url = "http://localhost:5000/projetos/123"
    
    # Teste 1: Tarefa designada
    print("1Ô∏è‚É£ Testando notifica√ß√£o de tarefa designada...")
    try:
        sucesso = notificar_tarefa_designada(
            'teste@exemplo.com',  # Substitua por um email v√°lido para teste
            'Usu√°rio de Teste',
            tarefa_info,
            projeto_url
        )
        if sucesso:
            print("   ‚úÖ Email de tarefa designada enviado com sucesso!")
        else:
            print("   ‚ùå Falha ao enviar email de tarefa designada")
    except Exception as e:
        print(f"   ‚ùå Erro ao enviar email de tarefa designada: {e}")
    
    print()
    
    # Teste 2: Tarefa removida
    print("2Ô∏è‚É£ Testando notifica√ß√£o de tarefa removida...")
    try:
        sucesso = notificar_tarefa_removida(
            'teste@exemplo.com',  # Substitua por um email v√°lido para teste
            'Usu√°rio de Teste',
            tarefa_info
        )
        if sucesso:
            print("   ‚úÖ Email de tarefa removida enviado com sucesso!")
        else:
            print("   ‚ùå Falha ao enviar email de tarefa removida")
    except Exception as e:
        print(f"   ‚ùå Erro ao enviar email de tarefa removida: {e}")
    
    print()
    
    # Teste 3: Status alterado
    print("3Ô∏è‚É£ Testando notifica√ß√£o de status alterado...")
    try:
        sucesso = notificar_status_alterado(
            'teste@exemplo.com',  # Substitua por um email v√°lido para teste
            'Usu√°rio de Teste',
            tarefa_info,
            'em progresso',
            'pendente',
            projeto_url
        )
        if sucesso:
            print("   ‚úÖ Email de status alterado enviado com sucesso!")
        else:
            print("   ‚ùå Falha ao enviar email de status alterado")
    except Exception as e:
        print(f"   ‚ùå Erro ao enviar email de status alterado: {e}")
    
    print()
    
    # Teste 4: Tarefa conclu√≠da
    print("4Ô∏è‚É£ Testando notifica√ß√£o de tarefa conclu√≠da...")
    try:
        sucesso = notificar_tarefa_concluida(
            'teste@exemplo.com',  # Substitua por um email v√°lido para teste
            'Usu√°rio de Teste',
            tarefa_info,
            projeto_url
        )
        if sucesso:
            print("   ‚úÖ Email de tarefa conclu√≠da enviado com sucesso!")
        else:
            print("   ‚ùå Falha ao enviar email de tarefa conclu√≠da")
    except Exception as e:
        print(f"   ‚ùå Erro ao enviar email de tarefa conclu√≠da: {e}")

def testar_conexao_smtp():
    """Testa a conex√£o com o servidor SMTP"""
    if not email_notifier.email_enabled:
        print("‚ùå Sistema de email desabilitado.")
        return
    
    print("üîå Testando conex√£o SMTP...")
    print("=" * 50)
    
    try:
        import smtplib
        
        # Tentar conectar ao servidor SMTP
        print(f"Conectando a {email_notifier.smtp_server}:{email_notifier.smtp_port}...")
        
        server = smtplib.SMTP(email_notifier.smtp_server, email_notifier.smtp_port)
        server.starttls()
        
        print("‚úÖ Conex√£o SMTP estabelecida com sucesso!")
        print("üîê Tentando autentica√ß√£o...")
        
        server.login(email_notifier.smtp_user, email_notifier.smtp_pass)
        print("‚úÖ Autentica√ß√£o SMTP bem-sucedida!")
        
        server.quit()
        print("‚úÖ Conex√£o SMTP fechada com sucesso!")
        
    except smtplib.SMTPAuthenticationError:
        print("‚ùå Falha na autentica√ß√£o SMTP")
        print("   Verifique usu√°rio e senha")
    except smtplib.SMTPConnectError:
        print("‚ùå Falha na conex√£o com servidor SMTP")
        print("   Verifique servidor e porta")
    except Exception as e:
        print(f"‚ùå Erro na conex√£o SMTP: {e}")

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ TESTE DO SISTEMA DE NOTIFICA√á√ïES POR EMAIL")
    print("=" * 60)
    print()
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Testar configura√ß√£o
    if not testar_configuracao_email():
        print("\n‚ùå Configura√ß√£o inv√°lida. Corrija as vari√°veis de ambiente primeiro.")
        return
    
    print()
    
    # Testar conex√£o SMTP
    testar_conexao_smtp()
    
    print()
    
    # Perguntar se quer testar envio de emails
    resposta = input("üìß Deseja testar o envio de emails? (s/n): ").lower().strip()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        print()
        testar_envio_emails()
    
    print()
    print("üèÅ Teste conclu√≠do!")
    print("\nüí° Dicas:")
    print("   - Configure um email v√°lido no c√≥digo para testar o envio")
    print("   - Verifique os logs para mais detalhes")
    print("   - Consulte docs/CONFIGURACAO_EMAIL.md para configura√ß√£o")

if __name__ == "__main__":
    main()
