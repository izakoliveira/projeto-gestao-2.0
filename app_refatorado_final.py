from flask import Flask, session
from config.app_config import Config
from config.database import supabase
from utils.auth import login_required, apenas_admin_izak, funcionalidade_restrita, carregar_restricoes, salvar_restricoes
from utils.validators import validar_projeto, normaliza_opcional, is_mobile_device

# Importar blueprints
from routes.auth import auth_bp
from routes.projetos import projetos_bp
from routes.tarefas import tarefas_bp
from routes.admin import admin_bp
from routes.pastas import pastas_bp
from routes.main import main_bp
from routes.producao import producao_bp

# Criar aplica√ß√£o Flask
app = Flask(__name__)

# Configurar aplica√ß√£o
app.config.from_object(Config)

# Registrar blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(projetos_bp)
app.register_blueprint(tarefas_bp)
app.register_blueprint(admin_bp)
app.register_blueprint(pastas_bp)
app.register_blueprint(main_bp)
app.register_blueprint(producao_bp)

# Rota de teste para verificar se tudo est√° funcionando
@app.route('/teste-refatoracao-final')
def teste_refatoracao_final():
    """Teste para verificar se todos os m√≥dulos est√£o funcionando"""
    try:
        # Testar conex√£o com banco
        supabase_client = supabase.auth
        db_status = "‚úÖ Conectado ao Supabase"
    except Exception as e:
        db_status = f"‚ùå Erro na conex√£o: {str(e)}"
    
    # Testar fun√ß√µes de autentica√ß√£o
    try:
        restricoes = carregar_restricoes()
        auth_status = "‚úÖ Fun√ß√µes de autentica√ß√£o funcionando"
    except Exception as e:
        auth_status = f"‚ùå Erro nas fun√ß√µes de autentica√ß√£o: {str(e)}"
    
    # Testar valida√ß√µes
    try:
        resultado = validar_projeto("Teste", "2024-01-01", "2024-12-31")
        validacao_status = "‚úÖ Fun√ß√µes de valida√ß√£o funcionando"
    except Exception as e:
        validacao_status = f"‚ùå Erro nas fun√ß√µes de valida√ß√£o: {str(e)}"
    
    # Verificar blueprints registrados
    blueprints = list(app.blueprints.keys())
    blueprint_status = f"‚úÖ Blueprints registrados: {', '.join(blueprints)}"
    
    return {
        "status": "Sistema refatorado funcionando!",
        "modulos": {
            "database": db_status,
            "auth": auth_status,
            "validators": validacao_status,
            "blueprints": blueprint_status
        },
        "blueprints_registrados": blueprints,
        "configuracoes": {
            "debug": app.config.get('DEBUG'),
            "secret_key": "‚úÖ Configurada" if app.config.get('SECRET_KEY') else "‚ùå N√£o configurada"
        }
    }

# Rota de teste para verificar funcionalidades espec√≠ficas
@app.route('/teste-funcionalidades')
def teste_funcionalidades():
    """Teste para verificar funcionalidades espec√≠ficas"""
    resultados = {}
    
    # Testar detec√ß√£o de mobile
    try:
        is_mobile = is_mobile_device("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)")
        resultados["mobile_detection"] = f"‚úÖ Detec√ß√£o mobile: {is_mobile}"
    except Exception as e:
        resultados["mobile_detection"] = f"‚ùå Erro na detec√ß√£o mobile: {str(e)}"
    
    # Testar normaliza√ß√£o
    try:
        resultado = normaliza_opcional("  teste  ")
        resultados["normalizacao"] = f"‚úÖ Normaliza√ß√£o: '{resultado}'"
    except Exception as e:
        resultados["normalizacao"] = f"‚ùå Erro na normaliza√ß√£o: {str(e)}"
    
    # Testar valida√ß√£o de projeto
    try:
        resultado = validar_projeto("", "2024-01-01", "2024-12-31")
        resultados["validacao_projeto"] = f"‚úÖ Valida√ß√£o projeto: {resultado}"
    except Exception as e:
        resultados["validacao_projeto"] = f"‚ùå Erro na valida√ß√£o: {str(e)}"
    
    return {
        "status": "Teste de funcionalidades",
        "resultados": resultados
    }

if __name__ == '__main__':
    print("üöÄ Iniciando aplica√ß√£o refatorada...")
    print("üìã Blueprints registrados:")
    for blueprint_name in app.blueprints.keys():
        print(f"   - {blueprint_name}")
    print("‚úÖ Sistema refatorado pronto!")
    app.run(debug=True) 